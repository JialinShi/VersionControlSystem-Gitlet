package gitlet;


import java.io.File;
import java.io.Serializable;
import java.nio.charset.StandardCharsets;

import static gitlet.Utils.*;
import static gitlet.AdditionalUtils.*;

/**
 * represent the content object
 *
 * @author Jialin Shi
 */

public class Blob implements Serializable {

    // Staged file - the source the blob needs to read.
    private final File source;

    //private final String blobID based on content;
    private final String blobSHA1;

    // the content stored in Blob.
    private final byte[] content;

    // the file generated by BlobSHA1 - write
    private final File file;

    public Blob(File source) {
        this.source = source;
        String sourcePath = source.getPath();
        content = readContents(source);
        blobSHA1 = sha1(sourcePath, content);
        file = getBlobFile(blobSHA1);
    }

    /**
     * generate SHA1 based on content and file path
     */
    public static String generateBlobSHA1(File source) {
        String sourcePath = source.getPath();
        byte[] content = readContents(source);
        String blobSHA1 = sha1(sourcePath, content);
        return blobSHA1;
    }

    /**
     * get saved Blob object from File
     */
    public static Blob fromFile(String blobSHA1) {
        File blobFile = getBlobFile(blobSHA1);
        return readObject(blobFile, Blob.class);
    }

    /**
     * save Blob object into file
     */
    public void saveBlob() {
        saveObject(file, this);
    }

    /**
     * get SHA1 of a Blob object
     */
    public String getBlobSHA1() {
        return blobSHA1;
    }

    /**
     * get the path of object file
     */
    public File getFile() {
        return file;
    }

    /**
     * return blob content
     */
    public String readBlobContentsAsString() {
        return readContentsAsString(file);
    }

    public String pullContentsAsString() {
        return new String(content, StandardCharsets.UTF_8);
    }


    public String getContentsAsString() {
        return new String(content, StandardCharsets.UTF_8);
    }

    /**
     * write byte[] to File
     */
    public void writeBlobContentsToSource() {
        writeContents(source, content);
    }

}
